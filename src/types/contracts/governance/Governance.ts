/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IGovernance {
  export type FeeInfoStruct = { feeReceiver: AddressLike; rate: BigNumberish };

  export type FeeInfoStructOutput = [feeReceiver: string, rate: bigint] & {
    feeReceiver: string;
    rate: bigint;
  };

  export type MarketConfigStruct = {
    waitToken: AddressLike;
    collateral: AddressLike;
    endTime: BigNumberish;
  };

  export type MarketConfigStructOutput = [
    waitToken: string,
    collateral: string,
    endTime: bigint
  ] & { waitToken: string; collateral: string; endTime: bigint };
}

export interface GovernanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "changeCollateral"
      | "changeFeeInfo"
      | "changeManager"
      | "changeMarketCollateral"
      | "changeOwner"
      | "changeSimpleFactory"
      | "collateral"
      | "getFeeInfo"
      | "getMarketConfig"
      | "getUserJoinMarketLength"
      | "indexUserJoinInfoGroup"
      | "join"
      | "manager"
      | "owner"
      | "setMarketConfig"
      | "simpleFactory"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "UpdateManager" | "UpdateOwner"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "changeCollateral",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFeeInfo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMarketCollateral",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSimpleFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserJoinMarketLength",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "indexUserJoinInfoGroup",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "join",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMarketConfig",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "simpleFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "changeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMarketCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSimpleFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFeeInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserJoinMarketLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexUserJoinInfoGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMarketConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simpleFactory",
    data: BytesLike
  ): Result;
}

export namespace UpdateManagerEvent {
  export type InputTuple = [oldManager: AddressLike, newManager: AddressLike];
  export type OutputTuple = [oldManager: string, newManager: string];
  export interface OutputObject {
    oldManager: string;
    newManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateOwnerEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Governance extends BaseContract {
  connect(runner?: ContractRunner | null): Governance;
  waitForDeployment(): Promise<this>;

  interface: GovernanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  changeCollateral: TypedContractMethod<
    [_collateral: AddressLike],
    [void],
    "nonpayable"
  >;

  changeFeeInfo: TypedContractMethod<
    [newFeeReceiver: AddressLike, newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeManager: TypedContractMethod<
    [_newManager: AddressLike],
    [void],
    "nonpayable"
  >;

  changeMarketCollateral: TypedContractMethod<
    [_marketId: BigNumberish, _collateral: AddressLike],
    [void],
    "nonpayable"
  >;

  changeOwner: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  changeSimpleFactory: TypedContractMethod<
    [_simpleFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  collateral: TypedContractMethod<[], [string], "view">;

  getFeeInfo: TypedContractMethod<
    [],
    [IGovernance.FeeInfoStructOutput],
    "view"
  >;

  getMarketConfig: TypedContractMethod<
    [marketId: BigNumberish],
    [IGovernance.MarketConfigStructOutput],
    "view"
  >;

  getUserJoinMarketLength: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  indexUserJoinInfoGroup: TypedContractMethod<
    [user: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  join: TypedContractMethod<
    [user: AddressLike, marketId: BigNumberish],
    [void],
    "nonpayable"
  >;

  manager: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  setMarketConfig: TypedContractMethod<
    [_marketId: BigNumberish, _endTime: BigNumberish, _waitToken: AddressLike],
    [void],
    "nonpayable"
  >;

  simpleFactory: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "changeCollateral"
  ): TypedContractMethod<[_collateral: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeFeeInfo"
  ): TypedContractMethod<
    [newFeeReceiver: AddressLike, newRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeManager"
  ): TypedContractMethod<[_newManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeMarketCollateral"
  ): TypedContractMethod<
    [_marketId: BigNumberish, _collateral: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeOwner"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeSimpleFactory"
  ): TypedContractMethod<[_simpleFactory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collateral"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFeeInfo"
  ): TypedContractMethod<[], [IGovernance.FeeInfoStructOutput], "view">;
  getFunction(
    nameOrSignature: "getMarketConfig"
  ): TypedContractMethod<
    [marketId: BigNumberish],
    [IGovernance.MarketConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserJoinMarketLength"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "indexUserJoinInfoGroup"
  ): TypedContractMethod<
    [user: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "join"
  ): TypedContractMethod<
    [user: AddressLike, marketId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "manager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setMarketConfig"
  ): TypedContractMethod<
    [_marketId: BigNumberish, _endTime: BigNumberish, _waitToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "simpleFactory"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "UpdateManager"
  ): TypedContractEvent<
    UpdateManagerEvent.InputTuple,
    UpdateManagerEvent.OutputTuple,
    UpdateManagerEvent.OutputObject
  >;
  getEvent(
    key: "UpdateOwner"
  ): TypedContractEvent<
    UpdateOwnerEvent.InputTuple,
    UpdateOwnerEvent.OutputTuple,
    UpdateOwnerEvent.OutputObject
  >;

  filters: {
    "UpdateManager(address,address)": TypedContractEvent<
      UpdateManagerEvent.InputTuple,
      UpdateManagerEvent.OutputTuple,
      UpdateManagerEvent.OutputObject
    >;
    UpdateManager: TypedContractEvent<
      UpdateManagerEvent.InputTuple,
      UpdateManagerEvent.OutputTuple,
      UpdateManagerEvent.OutputObject
    >;

    "UpdateOwner(address,address)": TypedContractEvent<
      UpdateOwnerEvent.InputTuple,
      UpdateOwnerEvent.OutputTuple,
      UpdateOwnerEvent.OutputObject
    >;
    UpdateOwner: TypedContractEvent<
      UpdateOwnerEvent.InputTuple,
      UpdateOwnerEvent.OutputTuple,
      UpdateOwnerEvent.OutputObject
    >;
  };
}
