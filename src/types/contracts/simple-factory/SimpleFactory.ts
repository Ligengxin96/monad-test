/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ISimpleFactory {
  export type MarketInfoStruct = {
    market: AddressLike;
    createTime: BigNumberish;
  };

  export type MarketInfoStructOutput = [market: string, createTime: bigint] & {
    market: string;
    createTime: bigint;
  };
}

export interface SimpleFactoryInterface extends Interface {
  getFunction(
    nameOrSignature: "createMarket" | "getMarketInfo" | "marketId"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CreateMarket"): EventFragment;

  encodeFunctionData(
    functionFragment: "createMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "marketId", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketId", data: BytesLike): Result;
}

export namespace CreateMarketEvent {
  export type InputTuple = [id: BigNumberish, market: AddressLike];
  export type OutputTuple = [id: bigint, market: string];
  export interface OutputObject {
    id: bigint;
    market: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimpleFactory extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleFactory;
  waitForDeployment(): Promise<this>;

  interface: SimpleFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createMarket: TypedContractMethod<[], [void], "nonpayable">;

  getMarketInfo: TypedContractMethod<
    [id: BigNumberish],
    [ISimpleFactory.MarketInfoStructOutput],
    "view"
  >;

  marketId: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createMarket"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMarketInfo"
  ): TypedContractMethod<
    [id: BigNumberish],
    [ISimpleFactory.MarketInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketId"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "CreateMarket"
  ): TypedContractEvent<
    CreateMarketEvent.InputTuple,
    CreateMarketEvent.OutputTuple,
    CreateMarketEvent.OutputObject
  >;

  filters: {
    "CreateMarket(uint256,address)": TypedContractEvent<
      CreateMarketEvent.InputTuple,
      CreateMarketEvent.OutputTuple,
      CreateMarketEvent.OutputObject
    >;
    CreateMarket: TypedContractEvent<
      CreateMarketEvent.InputTuple,
      CreateMarketEvent.OutputTuple,
      CreateMarketEvent.OutputObject
    >;
  };
}
