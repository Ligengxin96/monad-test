/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ISimpleMarketCore {
  export type OrderInfoStruct = {
    orderType: BigNumberish;
    state: BigNumberish;
    creatorWithdrawState: BytesLike;
    traderWithdrawState: BytesLike;
    trader: AddressLike;
    creator: AddressLike;
    price: BigNumberish;
    targetTokenAmount: BigNumberish;
    collateralAmount: BigNumberish;
    creationTime: BigNumberish;
  };

  export type OrderInfoStructOutput = [
    orderType: bigint,
    state: bigint,
    creatorWithdrawState: string,
    traderWithdrawState: string,
    trader: string,
    creator: string,
    price: bigint,
    targetTokenAmount: bigint,
    collateralAmount: bigint,
    creationTime: bigint
  ] & {
    orderType: bigint;
    state: bigint;
    creatorWithdrawState: string;
    traderWithdrawState: string;
    trader: string;
    creator: string;
    price: bigint;
    targetTokenAmount: bigint;
    collateralAmount: bigint;
    creationTime: bigint;
  };
}

export interface SimpleCoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancel"
      | "createOrder"
      | "currentMarketId"
      | "depoiste"
      | "getOrderInfo"
      | "getUserBuyIdsLength"
      | "getUserSellIdsLength"
      | "governance"
      | "indexUserBuyId"
      | "indexUserSellId"
      | "matchOrder"
      | "orderId"
      | "refund"
      | "withdraw"
      | "withdrawLiquidatedDamages"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CancelOrder"
      | "CreateOrder"
      | "DepositeOrder"
      | "MatchOrder"
      | "RefundOrder"
      | "WithdrawLiquidatedDamage"
      | "WithdrawOrder"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentMarketId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depoiste",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBuyIdsLength",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSellIdsLength",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "indexUserBuyId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexUserSellId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "matchOrder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "orderId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidatedDamages",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMarketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depoiste", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBuyIdsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSellIdsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "indexUserBuyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexUserSellId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "matchOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orderId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidatedDamages",
    data: BytesLike
  ): Result;
}

export namespace CancelOrderEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateOrderEvent {
  export type InputTuple = [
    id: BigNumberish,
    creator: AddressLike,
    total: BigNumberish
  ];
  export type OutputTuple = [id: bigint, creator: string, total: bigint];
  export interface OutputObject {
    id: bigint;
    creator: string;
    total: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositeOrderEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MatchOrderEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundOrderEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawLiquidatedDamageEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawOrderEvent {
  export type InputTuple = [id: BigNumberish, thisOrderType: BigNumberish];
  export type OutputTuple = [id: bigint, thisOrderType: bigint];
  export interface OutputObject {
    id: bigint;
    thisOrderType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimpleCore extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleCore;
  waitForDeployment(): Promise<this>;

  interface: SimpleCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancel: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  createOrder: TypedContractMethod<
    [_orderType: BigNumberish, _amount: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;

  currentMarketId: TypedContractMethod<[], [bigint], "view">;

  depoiste: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  getOrderInfo: TypedContractMethod<
    [thisOrderId: BigNumberish],
    [ISimpleMarketCore.OrderInfoStructOutput],
    "view"
  >;

  getUserBuyIdsLength: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserSellIdsLength: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  governance: TypedContractMethod<[], [string], "view">;

  indexUserBuyId: TypedContractMethod<
    [user: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  indexUserSellId: TypedContractMethod<
    [user: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  matchOrder: TypedContractMethod<
    [_orderType: BigNumberish, _id: BigNumberish],
    [void],
    "nonpayable"
  >;

  orderId: TypedContractMethod<[], [bigint], "view">;

  refund: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  withdraw: TypedContractMethod<
    [_orderType: BigNumberish, _id: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawLiquidatedDamages: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createOrder"
  ): TypedContractMethod<
    [_orderType: BigNumberish, _amount: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentMarketId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depoiste"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getOrderInfo"
  ): TypedContractMethod<
    [thisOrderId: BigNumberish],
    [ISimpleMarketCore.OrderInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserBuyIdsLength"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserSellIdsLength"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "indexUserBuyId"
  ): TypedContractMethod<
    [user: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "indexUserSellId"
  ): TypedContractMethod<
    [user: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "matchOrder"
  ): TypedContractMethod<
    [_orderType: BigNumberish, _id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "orderId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_orderType: BigNumberish, _id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawLiquidatedDamages"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CancelOrder"
  ): TypedContractEvent<
    CancelOrderEvent.InputTuple,
    CancelOrderEvent.OutputTuple,
    CancelOrderEvent.OutputObject
  >;
  getEvent(
    key: "CreateOrder"
  ): TypedContractEvent<
    CreateOrderEvent.InputTuple,
    CreateOrderEvent.OutputTuple,
    CreateOrderEvent.OutputObject
  >;
  getEvent(
    key: "DepositeOrder"
  ): TypedContractEvent<
    DepositeOrderEvent.InputTuple,
    DepositeOrderEvent.OutputTuple,
    DepositeOrderEvent.OutputObject
  >;
  getEvent(
    key: "MatchOrder"
  ): TypedContractEvent<
    MatchOrderEvent.InputTuple,
    MatchOrderEvent.OutputTuple,
    MatchOrderEvent.OutputObject
  >;
  getEvent(
    key: "RefundOrder"
  ): TypedContractEvent<
    RefundOrderEvent.InputTuple,
    RefundOrderEvent.OutputTuple,
    RefundOrderEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawLiquidatedDamage"
  ): TypedContractEvent<
    WithdrawLiquidatedDamageEvent.InputTuple,
    WithdrawLiquidatedDamageEvent.OutputTuple,
    WithdrawLiquidatedDamageEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawOrder"
  ): TypedContractEvent<
    WithdrawOrderEvent.InputTuple,
    WithdrawOrderEvent.OutputTuple,
    WithdrawOrderEvent.OutputObject
  >;

  filters: {
    "CancelOrder(uint256)": TypedContractEvent<
      CancelOrderEvent.InputTuple,
      CancelOrderEvent.OutputTuple,
      CancelOrderEvent.OutputObject
    >;
    CancelOrder: TypedContractEvent<
      CancelOrderEvent.InputTuple,
      CancelOrderEvent.OutputTuple,
      CancelOrderEvent.OutputObject
    >;

    "CreateOrder(uint256,address,uint256)": TypedContractEvent<
      CreateOrderEvent.InputTuple,
      CreateOrderEvent.OutputTuple,
      CreateOrderEvent.OutputObject
    >;
    CreateOrder: TypedContractEvent<
      CreateOrderEvent.InputTuple,
      CreateOrderEvent.OutputTuple,
      CreateOrderEvent.OutputObject
    >;

    "DepositeOrder(uint256)": TypedContractEvent<
      DepositeOrderEvent.InputTuple,
      DepositeOrderEvent.OutputTuple,
      DepositeOrderEvent.OutputObject
    >;
    DepositeOrder: TypedContractEvent<
      DepositeOrderEvent.InputTuple,
      DepositeOrderEvent.OutputTuple,
      DepositeOrderEvent.OutputObject
    >;

    "MatchOrder(uint256)": TypedContractEvent<
      MatchOrderEvent.InputTuple,
      MatchOrderEvent.OutputTuple,
      MatchOrderEvent.OutputObject
    >;
    MatchOrder: TypedContractEvent<
      MatchOrderEvent.InputTuple,
      MatchOrderEvent.OutputTuple,
      MatchOrderEvent.OutputObject
    >;

    "RefundOrder(uint256)": TypedContractEvent<
      RefundOrderEvent.InputTuple,
      RefundOrderEvent.OutputTuple,
      RefundOrderEvent.OutputObject
    >;
    RefundOrder: TypedContractEvent<
      RefundOrderEvent.InputTuple,
      RefundOrderEvent.OutputTuple,
      RefundOrderEvent.OutputObject
    >;

    "WithdrawLiquidatedDamage(uint256)": TypedContractEvent<
      WithdrawLiquidatedDamageEvent.InputTuple,
      WithdrawLiquidatedDamageEvent.OutputTuple,
      WithdrawLiquidatedDamageEvent.OutputObject
    >;
    WithdrawLiquidatedDamage: TypedContractEvent<
      WithdrawLiquidatedDamageEvent.InputTuple,
      WithdrawLiquidatedDamageEvent.OutputTuple,
      WithdrawLiquidatedDamageEvent.OutputObject
    >;

    "WithdrawOrder(uint256,uint8)": TypedContractEvent<
      WithdrawOrderEvent.InputTuple,
      WithdrawOrderEvent.OutputTuple,
      WithdrawOrderEvent.OutputObject
    >;
    WithdrawOrder: TypedContractEvent<
      WithdrawOrderEvent.InputTuple,
      WithdrawOrderEvent.OutputTuple,
      WithdrawOrderEvent.OutputObject
    >;
  };
}
