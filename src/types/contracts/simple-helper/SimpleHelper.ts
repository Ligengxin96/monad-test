/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ISimpleFactory {
  export type MarketInfoStruct = {
    market: AddressLike;
    createTime: BigNumberish;
  };

  export type MarketInfoStructOutput = [market: string, createTime: bigint] & {
    market: string;
    createTime: bigint;
  };
}

export declare namespace IGovernance {
  export type MarketConfigStruct = {
    waitToken: AddressLike;
    collateral: AddressLike;
    endTime: BigNumberish;
  };

  export type MarketConfigStructOutput = [
    waitToken: string,
    collateral: string,
    endTime: bigint
  ] & { waitToken: string; collateral: string; endTime: bigint };
}

export declare namespace ISimpleMarketCore {
  export type OrderInfoStruct = {
    orderType: BigNumberish;
    state: BigNumberish;
    creatorWithdrawState: BytesLike;
    traderWithdrawState: BytesLike;
    trader: AddressLike;
    creator: AddressLike;
    price: BigNumberish;
    targetTokenAmount: BigNumberish;
    collateralAmount: BigNumberish;
    creationTime: BigNumberish;
  };

  export type OrderInfoStructOutput = [
    orderType: bigint,
    state: bigint,
    creatorWithdrawState: string,
    traderWithdrawState: string,
    trader: string,
    creator: string,
    price: bigint,
    targetTokenAmount: bigint,
    collateralAmount: bigint,
    creationTime: bigint
  ] & {
    orderType: bigint;
    state: bigint;
    creatorWithdrawState: string;
    traderWithdrawState: string;
    trader: string;
    creator: string;
    price: bigint;
    targetTokenAmount: bigint;
    collateralAmount: bigint;
    creationTime: bigint;
  };
}

export interface SimpleHelperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "changeConfig"
      | "getFee"
      | "getLastestMarketId"
      | "getLastestOrderId"
      | "getMarketInfo"
      | "getMarketOrderInfos"
      | "getOrderInfo"
      | "getOrderState"
      | "getOrdersInfo"
      | "getTokenDecimals"
      | "getUserJoinMarkets"
      | "getUserTokenBalance"
      | "governance"
      | "indexUserBuyIds"
      | "indexUserSellIds"
      | "owner"
      | "simpleFactory"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changeConfig",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastestMarketId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastestOrderId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketOrderInfos",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderState",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrdersInfo",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenDecimals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserJoinMarkets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokenBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "indexUserBuyIds",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexUserSellIds",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "simpleFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "changeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastestMarketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastestOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketOrderInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrdersInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserJoinMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "indexUserBuyIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexUserSellIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "simpleFactory",
    data: BytesLike
  ): Result;
}

export interface SimpleHelper extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleHelper;
  waitForDeployment(): Promise<this>;

  interface: SimpleHelperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  changeConfig: TypedContractMethod<
    [_governance: AddressLike, _simpleFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  getFee: TypedContractMethod<
    [marketId: BigNumberish, total: BigNumberish],
    [bigint],
    "view"
  >;

  getLastestMarketId: TypedContractMethod<[], [bigint], "view">;

  getLastestOrderId: TypedContractMethod<
    [marketId: BigNumberish],
    [bigint],
    "view"
  >;

  getMarketInfo: TypedContractMethod<
    [pageIndex: BigNumberish],
    [
      [
        ISimpleFactory.MarketInfoStructOutput[],
        IGovernance.MarketConfigStructOutput[]
      ] & {
        marketInfoGroup: ISimpleFactory.MarketInfoStructOutput[];
        marketConfigGroup: IGovernance.MarketConfigStructOutput[];
      }
    ],
    "view"
  >;

  getMarketOrderInfos: TypedContractMethod<
    [marketId: BigNumberish, pageIndex: BigNumberish],
    [ISimpleMarketCore.OrderInfoStructOutput[]],
    "view"
  >;

  getOrderInfo: TypedContractMethod<
    [marketId: BigNumberish, orderId: BigNumberish],
    [ISimpleMarketCore.OrderInfoStructOutput],
    "view"
  >;

  getOrderState: TypedContractMethod<
    [marketId: BigNumberish, orderId: BigNumberish],
    [bigint],
    "view"
  >;

  getOrdersInfo: TypedContractMethod<
    [marketId: BigNumberish, orderIds: BigNumberish[]],
    [
      [bigint[], ISimpleMarketCore.OrderInfoStructOutput[]] & {
        orderCurrentStateGroup: bigint[];
        orderInfoGroup: ISimpleMarketCore.OrderInfoStructOutput[];
      }
    ],
    "view"
  >;

  getTokenDecimals: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  getUserJoinMarkets: TypedContractMethod<
    [user: AddressLike, pageIndex: BigNumberish],
    [bigint[]],
    "view"
  >;

  getUserTokenBalance: TypedContractMethod<
    [token: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;

  governance: TypedContractMethod<[], [string], "view">;

  indexUserBuyIds: TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike, pageIndex: BigNumberish],
    [bigint[]],
    "view"
  >;

  indexUserSellIds: TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike, pageIndex: BigNumberish],
    [bigint[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  simpleFactory: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "changeConfig"
  ): TypedContractMethod<
    [_governance: AddressLike, _simpleFactory: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<
    [marketId: BigNumberish, total: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastestMarketId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastestOrderId"
  ): TypedContractMethod<[marketId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMarketInfo"
  ): TypedContractMethod<
    [pageIndex: BigNumberish],
    [
      [
        ISimpleFactory.MarketInfoStructOutput[],
        IGovernance.MarketConfigStructOutput[]
      ] & {
        marketInfoGroup: ISimpleFactory.MarketInfoStructOutput[];
        marketConfigGroup: IGovernance.MarketConfigStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarketOrderInfos"
  ): TypedContractMethod<
    [marketId: BigNumberish, pageIndex: BigNumberish],
    [ISimpleMarketCore.OrderInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrderInfo"
  ): TypedContractMethod<
    [marketId: BigNumberish, orderId: BigNumberish],
    [ISimpleMarketCore.OrderInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrderState"
  ): TypedContractMethod<
    [marketId: BigNumberish, orderId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrdersInfo"
  ): TypedContractMethod<
    [marketId: BigNumberish, orderIds: BigNumberish[]],
    [
      [bigint[], ISimpleMarketCore.OrderInfoStructOutput[]] & {
        orderCurrentStateGroup: bigint[];
        orderInfoGroup: ISimpleMarketCore.OrderInfoStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenDecimals"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserJoinMarkets"
  ): TypedContractMethod<
    [user: AddressLike, pageIndex: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTokenBalance"
  ): TypedContractMethod<
    [token: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "indexUserBuyIds"
  ): TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike, pageIndex: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "indexUserSellIds"
  ): TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike, pageIndex: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "simpleFactory"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
